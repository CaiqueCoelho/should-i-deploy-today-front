{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/Projetos/should-i-deploy-today-front/src/pages/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './home.css';\nimport './login.css';\nimport Spinner from 'react-spinner-material';\nimport * as Sentry from \"@sentry/react\";\nimport axios from 'axios';\nimport BestTime from './BestTime';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { TwitterShareButton, TwitterIcon } from \"react-share\";\nimport { parseTime } from './utils';\nimport * as firebase from 'firebase';\nconst fullTitle = 'Hoje vou tomar meu banho sem passar frio e sem gastar muito energia. Se você é de';\nconst ColorButton = withStyles(theme => ({\n  root: {\n    color: '#FFFFFF',\n    backgroundColor: '#449AE2',\n    '&:hover': {\n      backgroundColor: '#249AE2'\n    },\n    marginTop: \"10px\",\n    marginBottom: \"30px\",\n    width: '100%'\n  }\n}))(Button);\nconst NextTimeButton = withStyles(theme => ({\n  root: {\n    color: '#449AE2',\n    backgroundColor: '#FFFFFF',\n    '&:hover': {\n      backgroundColor: '#249AE2',\n      color: '#FFFFFF'\n    },\n    width: '100%',\n    marginBottom: \"20px\"\n  }\n}))(Button);\nexport default function Home() {\n  _s();\n\n  const [runLoad, setRunLoad] = useState(false);\n  const [city, setCity] = useState('São Paulo');\n  const [lastCity, setLastCity] = useState('');\n  const [times, setTimes] = useState([]);\n  const [nextTime, setNextTime] = useState(0);\n  const [bestTime, setBestTime] = useState({\n    temp: 0,\n    datetimeStr: ''\n  });\n  const [otherTime, setOtherTime] = useState(false);\n  const [openToast, setOpenToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState(false);\n\n  function cleanStates() {\n    setNextTime(0);\n    setBestTime('');\n    setTimes([]);\n    setLastCity('');\n  }\n\n  function handleChangeCity(e) {\n    setCity(e.target.value);\n    cleanStates();\n  }\n\n  async function getWeather(callForecastAgain, otherTime) {\n    try {\n      setRunLoad(true);\n      setOtherTime(otherTime);\n\n      if (city.length > 50) {\n        setToastMessage(\"Erro tentar buscar pela cidade, tente novamente!\");\n        setOpenToast(true);\n        setRunLoad(false);\n        return;\n      }\n\n      if (lastCity !== city || callForecastAgain) {\n        setLastCity(city);\n        setRunLoad(true);\n        let payload = {\n          location: city.trim()\n        };\n        const res = await axios.post('https://melhor-horario-banho.herokuapp.com/forecast-weather', payload).catch(error => {\n          console.error(error);\n          Sentry.captureException(error);\n          setToastMessage(error.message);\n          setOpenToast(true);\n          setRunLoad(false);\n          return error;\n        });\n\n        if (res.status !== 200) {\n          Sentry.captureException(res);\n          console.error(res);\n          setToastMessage(\"Erro ao buscar pela cidade, tente novamente!\");\n          setOpenToast(true);\n          setRunLoad(false);\n          cleanStates();\n          return;\n        }\n\n        const datesList = [];\n        res.data.locations[0].values.map(date => {\n          if (date.datetimeStr.includes(getDate())) {\n            datesList.push(date);\n          }\n        });\n        setSave(true);\n        setTimes(datesList);\n        setOpenToast(false);\n      } else {\n        setBestTime(getTheBestTime(otherTime));\n        setRunLoad(false);\n        setOpenToast(false);\n      }\n    } catch (error) {\n      Sentry.captureException(error);\n      console.error(error.message);\n      setToastMessage(error.message);\n      setOpenToast(true);\n    }\n  }\n\n  function getDate() {\n    let today = new Date();\n    const dd = String(today.getDate()).padStart(2, '0');\n    const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n    const yyyy = today.getFullYear();\n    today = mm + '/' + dd + '/' + yyyy;\n    const mmdd = mm + '-' + dd;\n    return mmdd;\n  }\n\n  function getFullDate() {\n    const today = new Date();\n    const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    return date;\n  }\n\n  function getTime() {\n    const today = new Date();\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    return time;\n  }\n\n  useEffect(() => {}, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"Qual a melhor hora para tomar banho?\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"subtitle-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 42\n    }\n  }, \"N\\xE3o passe frio\"), \" e \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 66\n    }\n  }, \"economize energia\"), \" tomando seu banho todos os dias no hor\\xE1rio que est\\xE1 mais quentinho\"), /*#__PURE__*/React.createElement(TextField, {\n    className: \"custom-input\",\n    id: \"outlined-basic\",\n    label: \"Qual cidade voc\\xEA est\\xE1?\",\n    variant: \"outlined\",\n    onChange: handleChangeCity,\n    value: city,\n    \"aria-label\": \"Qual cidade voc\\xEA est\\xE1?\",\n    placeholder: \"Qual cidade voc\\xEA est\\xE1?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ColorButton, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => getWeather(false, false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, \"Buscar melhor hor\\xE1rio\"), runLoad && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 26\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    className: \"spinner\",\n    size: 60,\n    spinnerColor: \"#449AE2\",\n    visible: runLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  })), times.length > 0 && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"paragraph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 36\n    }\n  }, \"O melhor hor\\xE1rio para voc\\xEA tomar seu banho hoje \\xE9:\"), times.length > 0 && /*#__PURE__*/React.createElement(BestTime, {\n    bestTime: bestTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }), times.length > 0 && /*#__PURE__*/React.createElement(NextTimeButton, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => getWeather(false, true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, \"Buscar outro hor\\xE1rio\"), /*#__PURE__*/React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    key: 'bottom,center',\n    open: openToast,\n    autoHideDuration: 3000,\n    ContentProps: {\n      'aria-describedby': 'message-id'\n    },\n    message: /*#__PURE__*/React.createElement(\"span\", {\n      id: \"message-id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 24\n      }\n    }, toastMessage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }));\n}\n\n_s(Home, \"Z6Ll1hhBoi/b2+GW6nB09djTl4k=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/user/Documents/Projetos/should-i-deploy-today-front/src/pages/Home/Home.js"],"names":["React","useEffect","useState","Spinner","Sentry","axios","BestTime","TextField","Button","withStyles","Link","Snackbar","TwitterShareButton","TwitterIcon","parseTime","firebase","fullTitle","ColorButton","theme","root","color","backgroundColor","marginTop","marginBottom","width","NextTimeButton","Home","runLoad","setRunLoad","city","setCity","lastCity","setLastCity","times","setTimes","nextTime","setNextTime","bestTime","setBestTime","temp","datetimeStr","otherTime","setOtherTime","openToast","setOpenToast","toastMessage","setToastMessage","cleanStates","handleChangeCity","e","target","value","getWeather","callForecastAgain","length","payload","location","trim","res","post","catch","error","console","captureException","message","status","datesList","data","locations","values","map","date","includes","getDate","push","setSave","getTheBestTime","today","Date","dd","String","padStart","mm","getMonth","yyyy","getFullYear","mmdd","getFullDate","getTime","time","getHours","getMinutes","getSeconds","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './home.css'\nimport './login.css'\nimport Spinner from 'react-spinner-material';\nimport * as Sentry from \"@sentry/react\";\nimport axios from 'axios';\n\nimport BestTime from './BestTime';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { Link } from 'react-router-dom';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { TwitterShareButton, TwitterIcon } from \"react-share\";\nimport { parseTime } from './utils';\n\nimport * as firebase from 'firebase';\n\nconst fullTitle = 'Hoje vou tomar meu banho sem passar frio e sem gastar muito energia. Se você é de'\n\nconst ColorButton = withStyles((theme) => ({\n  root: {\n    color: '#FFFFFF',\n    backgroundColor: '#449AE2',\n    '&:hover': {\n      backgroundColor: '#249AE2',\n    },\n    marginTop: \"10px\",\n    marginBottom: \"30px\",\n    width: '100%',\n  },\n}))(Button);\n\nconst NextTimeButton = withStyles((theme) => ({\n  root: {\n    color: '#449AE2',\n    backgroundColor: '#FFFFFF',\n    '&:hover': {\n      backgroundColor: '#249AE2',\n      color: '#FFFFFF',\n    },\n    width: '100%',\n    marginBottom: \"20px\",\n  },\n}))(Button);\n\nexport default function Home() {\n\n    const [runLoad, setRunLoad] = useState(false);\n    const [city, setCity] = useState('São Paulo');\n    const [lastCity, setLastCity] = useState('');\n    const [times, setTimes] = useState([]);\n    const [nextTime, setNextTime] = useState(0);\n    const [bestTime, setBestTime] = useState({temp: 0, datetimeStr: ''});\n    const [otherTime, setOtherTime] = useState(false);\n    const [openToast, setOpenToast] = useState(false);\n    const [toastMessage, setToastMessage] = useState(false);\n\n  function cleanStates(){\n    setNextTime(0);\n    setBestTime('');\n    setTimes([]);\n    setLastCity('')\n  }\n\n  function handleChangeCity(e) {\n    setCity(e.target.value);\n    cleanStates();\n  }\n\n  async function getWeather(callForecastAgain, otherTime) {\n    try {\n      setRunLoad(true);\n      setOtherTime(otherTime)\n\n      if(city.length > 50){\n        setToastMessage(\"Erro tentar buscar pela cidade, tente novamente!\");\n        setOpenToast(true)\n        setRunLoad(false);\n        return ;\n      }\n\n      if((lastCity !== city) || callForecastAgain){\n        setLastCity(city);\n        setRunLoad(true);\n\n        let payload = { location: city.trim() };\n\n        const res = await axios.post('https://melhor-horario-banho.herokuapp.com/forecast-weather', \n          payload\n        ).catch((error) => {\n          console.error(error);\n          Sentry.captureException(error);\n          setToastMessage(error.message);\n          setOpenToast(true);\n          setRunLoad(false);\n          return error;\n        });\n\n        if(res.status !== 200){\n          Sentry.captureException(res)\n          console.error(res)\n          setToastMessage(\"Erro ao buscar pela cidade, tente novamente!\");\n          setOpenToast(true)\n          setRunLoad(false)\n          cleanStates();\n          return ;\n        }\n      \n        const datesList = []\n        res.data.locations[0].values.map( date => {\n          if(date.datetimeStr.includes(getDate())){\n            datesList.push(date)\n          }\n          \n        })\n        setSave(true);\n        setTimes(datesList);\n        setOpenToast(false)\n      } else {\n        setBestTime(getTheBestTime(otherTime))\n        setRunLoad(false);\n        setOpenToast(false)\n      }\n    } catch (error) {\n      Sentry.captureException(error)\n      console.error(error.message)\n      setToastMessage(error.message);\n      setOpenToast(true)\n    }\n  }\n  \n  function getDate() {\n    let today = new Date();\n    const dd = String(today.getDate()).padStart(2, '0');\n    const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    const yyyy = today.getFullYear();\n  \n    today = mm + '/' + dd + '/' + yyyy;\n    const mmdd = mm + '-' + dd\n    return mmdd;\n  }\n\n  function getFullDate() {\n    const today = new Date();\n    const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n    return date;\n  }\n\n  function getTime() {\n    const today = new Date();\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    return time;\n  }\n\n    useEffect(() => {\n    }, [])\n\n    return (\n        <div>\n            <h1 className='title-page'>Qual a melhor hora para tomar banho?</h1>\n            <p className='subtitle-page'><b>Não passe frio</b> e <b>economize energia</b> tomando seu banho todos os dias no horário que está mais quentinho</p>\n\n            <TextField className=\"custom-input\" id=\"outlined-basic\" label=\"Qual cidade você está?\" variant=\"outlined\" onChange={handleChangeCity} value={city} aria-label=\"Qual cidade você está?\" placeholder=\"Qual cidade você está?\"/>\n\n            <ColorButton variant=\"contained\" color=\"primary\" onClick={() => getWeather(false, false)}>\n              Buscar melhor horário\n            </ColorButton>\n\n            {runLoad && (<span className='spinner'>\n                <Spinner className='spinner' size={60} spinnerColor={\"#449AE2\"} visible={runLoad} />\n            </span>)}\n\n            { times.length > 0 && (<p className='paragraph'>O melhor horário para você tomar seu banho hoje é:</p>)}\n            { times.length > 0 && \n            <BestTime\n              bestTime={bestTime}\n            />\n            }\n\n            { times.length > 0 && \n            <NextTimeButton variant=\"contained\" color=\"primary\" onClick={() => getWeather(false, true)}>\n              Buscar outro horário\n            </NextTimeButton>\n            }\n\n            <Snackbar\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n              key={'bottom,center'}\n              open={openToast}\n              autoHideDuration={3000}\n              ContentProps={{\n                'aria-describedby': 'message-id',\n              }}\n              message={<span id=\"message-id\">{toastMessage}</span>}\n            />\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}