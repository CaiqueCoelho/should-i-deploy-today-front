[{"/Users/user/Documents/Projetos/should-i-deploy-today-front/src/index.js":"1","/Users/user/Documents/Projetos/should-i-deploy-today-front/src/App.js":"2","/Users/user/Documents/Projetos/should-i-deploy-today-front/src/serviceWorker.js":"3","/Users/user/Documents/Projetos/should-i-deploy-today-front/src/routes.js":"4","/Users/user/Documents/Projetos/should-i-deploy-today-front/src/pages/Home/Home.js":"5","/Users/user/Documents/Projetos/should-i-deploy-today-front/src/pages/Home/utils.js":"6","/Users/user/Documents/Projetos/should-i-deploy-today-front/src/pages/Home/BestTime.js":"7"},{"size":451,"mtime":1642376356817,"results":"8","hashOfConfig":"9"},{"size":241,"mtime":1642376446906,"results":"10","hashOfConfig":"9"},{"size":5488,"mtime":1642375828796,"results":"11","hashOfConfig":"9"},{"size":335,"mtime":1642376246711,"results":"12","hashOfConfig":"9"},{"size":5553,"mtime":1642376543807,"results":"13","hashOfConfig":"9"},{"size":142,"mtime":1642375828796,"results":"14","hashOfConfig":"9"},{"size":796,"mtime":1642376246711,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"g8lth9",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/user/Documents/Projetos/should-i-deploy-today-front/src/index.js",[],["33","34"],"/Users/user/Documents/Projetos/should-i-deploy-today-front/src/App.js",[],"/Users/user/Documents/Projetos/should-i-deploy-today-front/src/serviceWorker.js",["35"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n\n  window.addEventListener('activate', function(event) {\n    event.waitUntil(\n      caches.keys().then(function(cacheNames) {\n        return Promise.all(\n          cacheNames.filter(function(cacheName) {\n            // Return true if you want to remove this cache,\n            // but remember that caches are shared across\n            // the whole origin\n          }).map(function(cacheName) {\n            return caches.delete(cacheName);\n          })\n        );\n      })\n    );\n  });\n}\n","/Users/user/Documents/Projetos/should-i-deploy-today-front/src/routes.js",[],"/Users/user/Documents/Projetos/should-i-deploy-today-front/src/pages/Home/Home.js",["36","37","38","39","40"],"import React, { useEffect, useState } from 'react';\nimport './home.css'\nimport './login.css'\nimport Spinner from 'react-spinner-material';\nimport axios from 'axios';\n\nimport BestTime from './BestTime';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nconst ColorButton = withStyles((theme) => ({\n  root: {\n    color: '#FFFFFF',\n    backgroundColor: '#449AE2',\n    '&:hover': {\n      backgroundColor: '#249AE2',\n    },\n    marginTop: \"10px\",\n    marginBottom: \"30px\",\n    width: '100%',\n  },\n}))(Button);\n\nconst NextTimeButton = withStyles((theme) => ({\n  root: {\n    color: '#449AE2',\n    backgroundColor: '#FFFFFF',\n    '&:hover': {\n      backgroundColor: '#249AE2',\n      color: '#FFFFFF',\n    },\n    width: '100%',\n    marginBottom: \"20px\",\n  },\n}))(Button);\n\nexport default function Home() {\n\n    const [runLoad, setRunLoad] = useState(false);\n    const [city, setCity] = useState('SÃ£o Paulo');\n    const [lastCity, setLastCity] = useState('');\n    const [times, setTimes] = useState([]);\n    const [nextTime, setNextTime] = useState(0);\n    const [bestTime, setBestTime] = useState({temp: 0, datetimeStr: ''});\n    const [otherTime, setOtherTime] = useState(false);\n    const [openToast, setOpenToast] = useState(false);\n    const [toastMessage, setToastMessage] = useState(false);\n\n  function cleanStates(){\n    setNextTime(0);\n    setBestTime('');\n    setTimes([]);\n    setLastCity('')\n  }\n\n  function handleChangeCity(e) {\n    setCity(e.target.value);\n    cleanStates();\n  }\n\n  async function getWeather(callForecastAgain, otherTime) {\n    try {\n      setRunLoad(true);\n      setOtherTime(otherTime)\n\n      if(city.length > 50){\n        setToastMessage(\"Erro tentar buscar pela cidade, tente novamente!\");\n        setOpenToast(true)\n        setRunLoad(false);\n        return ;\n      }\n\n      if((lastCity !== city) || callForecastAgain){\n        setLastCity(city);\n        setRunLoad(true);\n\n        let payload = { location: city.trim() };\n\n        const res = await axios.post('https://melhor-horario-banho.herokuapp.com/forecast-weather', \n          payload\n        ).catch((error) => {\n          console.error(error);\n          setToastMessage(error.message);\n          setOpenToast(true);\n          setRunLoad(false);\n          return error;\n        });\n\n        if(res.status !== 200){\n          console.error(res)\n          setToastMessage(\"Erro ao buscar pela cidade, tente novamente!\");\n          setOpenToast(true)\n          setRunLoad(false)\n          cleanStates();\n          return ;\n        }\n      \n        const datesList = []\n        res.data.locations[0].values.map( date => {\n          if(date.datetimeStr.includes(getDate())){\n            datesList.push(date)\n          }\n          \n        })\n        setTimes(datesList);\n        setOpenToast(false)\n      } else {\n        setRunLoad(false);\n        setOpenToast(false)\n      }\n    } catch (error) {\n      console.error(error.message)\n      setToastMessage(error.message);\n      setOpenToast(true)\n    }\n  }\n  \n  function getDate() {\n    let today = new Date();\n    const dd = String(today.getDate()).padStart(2, '0');\n    const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    const yyyy = today.getFullYear();\n  \n    today = mm + '/' + dd + '/' + yyyy;\n    const mmdd = mm + '-' + dd\n    return mmdd;\n  }\n\n  function getFullDate() {\n    const today = new Date();\n    const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n    return date;\n  }\n\n  function getTime() {\n    const today = new Date();\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    return time;\n  }\n\n    useEffect(() => {\n    }, [])\n\n    return (\n        <div>\n            <h1 className='title-page'>Qual a melhor hora para tomar banho?</h1>\n            <p className='subtitle-page'><b>NÃ£o passe frio</b> e <b>economize energia</b> tomando seu banho todos os dias no horÃ¡rio que estÃ¡ mais quentinho</p>\n\n            <TextField className=\"custom-input\" id=\"outlined-basic\" label=\"Qual cidade vocÃª estÃ¡?\" variant=\"outlined\" onChange={handleChangeCity} value={city} aria-label=\"Qual cidade vocÃª estÃ¡?\" placeholder=\"Qual cidade vocÃª estÃ¡?\"/>\n\n            <ColorButton variant=\"contained\" color=\"primary\" onClick={() => getWeather(false, false)}>\n              Buscar melhor horÃ¡rio\n            </ColorButton>\n\n            {runLoad && (<span className='spinner'>\n                <Spinner className='spinner' size={60} spinnerColor={\"#449AE2\"} visible={runLoad} />\n            </span>)}\n\n            { times.length > 0 && (<p className='paragraph'>O melhor horÃ¡rio para vocÃª tomar seu banho hoje Ã©:</p>)}\n            { times.length > 0 && \n            <BestTime\n              bestTime={bestTime}\n            />\n            }\n\n            { times.length > 0 && \n            <NextTimeButton variant=\"contained\" color=\"primary\" onClick={() => getWeather(false, true)}>\n              Buscar outro horÃ¡rio\n            </NextTimeButton>\n            }\n\n            <Snackbar\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n              key={'bottom,center'}\n              open={openToast}\n              autoHideDuration={3000}\n              ContentProps={{\n                'aria-describedby': 'message-id',\n              }}\n              message={<span id=\"message-id\">{toastMessage}</span>}\n            />\n        </div>\n    );\n}","/Users/user/Documents/Projetos/should-i-deploy-today-front/src/pages/Home/utils.js",[],"/Users/user/Documents/Projetos/should-i-deploy-today-front/src/pages/Home/BestTime.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":142,"column":29,"nodeType":"47","messageId":"48","endLine":142,"endColumn":37},{"ruleId":"49","severity":1,"message":"50","line":45,"column":12,"nodeType":"51","messageId":"52","endLine":45,"endColumn":20},{"ruleId":"49","severity":1,"message":"53","line":47,"column":12,"nodeType":"51","messageId":"52","endLine":47,"endColumn":21},{"ruleId":"45","severity":1,"message":"54","line":101,"column":48,"nodeType":"55","messageId":"48","endLine":101,"endColumn":50},{"ruleId":"49","severity":1,"message":"56","line":131,"column":12,"nodeType":"51","messageId":"52","endLine":131,"endColumn":23},{"ruleId":"49","severity":1,"message":"57","line":137,"column":12,"nodeType":"51","messageId":"52","endLine":137,"endColumn":19},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"array-callback-return","Array.prototype.filter() expects a return value from function.","FunctionExpression","expectedInside","no-unused-vars","'nextTime' is assigned a value but never used.","Identifier","unusedVar","'otherTime' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","'getFullDate' is defined but never used.","'getTime' is defined but never used.","no-global-assign","no-unsafe-negation"]